---
title: "PP Tables & Figures"
format: docx
params:
  delivery: 20240326

execute: 
  echo: false
---

```{r, warning=FALSE, message=FALSE}
invisible(library(tidyverse))
library(gtsummary)
library(magrittr, include.only = "%<>%")
```

```{r}  
# Set the project root
proj_root <- "D:/PATHWEIGH/"

# Set the data delivery date to the appropriate data set
delivery <- params$delivery

# Load pp_data for creating tables
load(str_c(proj_root, "delivery_", delivery, "/data/pp_data_", delivery, ".Rdata"))
data <- pp_data

# Load visits_post_id
load(str_c(proj_root, "delivery_", delivery, "/data/processed_visits_post_id_", delivery, ".Rdata"))

# Load pp_mod_data for modeling
load(str_c(proj_root, "delivery_", delivery, "/data/pp_mod_data_", delivery, ".Rdata"))
data <- pp_data

```


```{r}  
visits_post_id <- 
  visits_post_id %>%
  mutate(across(PHQ2:GAD7, ~ as.numeric(.)),
            EOSS = fct_na_value_to_level(factor(EOSS, levels = c("0", "1", "2", "3")), level = "Unknown"))
```
### The following output is automated. Some manual manipulation will be needed upon each iteration for the final manuscript
1. Change BMI kg/m^2 to superscript the 2.
2. Remove N=7,578 through out the document
3. Change font

# Table: Health metrics at index and last visits

```{r}
tab1 <- bind_rows(
(visits_post_id %>%
  filter(Arb_PersonId %in% data$Arb_PersonId, 
         IndexVisit == 1)),
(visits_post_id %>%
  filter(Arb_PersonId %in% data$Arb_PersonId, 
         LastVisit == 1))) %>%
  mutate(Visit = factor(ifelse(IndexVisit == 1, "Index Visit", "Final Visit"), levels = c("Index Visit", "Final Visit"))) %>%
  mutate(Intervention.factor = factor(Intervention.factor, levels = c("Control", "Intervention"))) %>%
  mutate(Smoking_Status = fct_na_value_to_level(Smoking_Status, level = "Unknown")) %>%
  select(Age, Sex, Race_Ethnicity, Insurance, BMI,
         Systolic_blood_pressure, Diastolic_blood_pressure,
         A1C:TSH, -`Cystatin C`, EOSS,
         PHQ2, PHQ9, GAD7, Smoking_Status,
         Intervention.factor, Visit) %>%
  tbl_strata(
    strata = "Intervention.factor",
    .tbl_fun = 
      ~ .x %>%
      tbl_summary(by = Visit,
                  missing = "ifany",
                  type = list(c(PHQ2, PHQ9, GAD7) ~ 'continuous'),
                  statistic = list(all_continuous() ~ c("{mean} ({sd})")),
                  label = list(Race_Ethnicity ~ "Race/Ethnicity",
                                  BMI ~ "BMI (kg/m^2)",
                                  Systolic_blood_pressure ~ "Systolic BP (mmHg)",
                                  Diastolic_blood_pressure ~ "Diastolic BP (mmHg)",
                                  Smoking_Status ~ "Smoking Status"),
                  digits = list(all_categorical() ~ c(0,1),
                                  all_continuous() ~ c(1,1)))
        ) %>%
  as_gt()

tab1
```

```{r, eval=FALSE}
# Need reasonable range for ALT
visits_post_id %>%
  filter(Arb_PersonId %in% data$Arb_PersonId, 
         IndexVisit == 1) %>%
  # filter(Intervention == "Intervention") %>%
  select(ALT, Intervention.factor) %>%
  drop_na() %>%
  # filter(ALT < 500) %>%
  ggplot(., aes(y = ALT, color = Intervention.factor)) +
  geom_boxplot()

# Need reasonable range for AST
visits_post_id %>%
  filter(Arb_PersonId %in% data$Arb_PersonId, 
         IndexVisit == 1) %>%
  # filter(Intervention == "Intervention") %>%
  select(AST, Intervention.factor) %>%
  drop_na() %>%
  # filter(ALT < 500) %>%
  ggplot(., aes(y = AST, color = Intervention.factor)) +
  geom_boxplot()
```

# Table: Identification of WPVs (OBHPI, WMQ, SMART, etc.) and referrals, procedures, 
```{r}
# Table 3 WPVs ---------------------------------------------------------------
  # Table 3 is created by merging two separate tables that are created in the
  # same way, but have different  data sets. Sub table 3.1 consists of the index
  # visits from those that are in mod_data[["ee"]] while sub table 3.2 consists
  # of all visits in from analyzed patients found in visits_post_id including
  # the index visits.

  ## Create data for sub table 3.1 ----
  # Capture index visits for those in control phase in mod data
  wpv_con_ind <- visits_post_id %>%
    filter(Arb_PersonId %in% (data %>% filter(Intervention == "Control") %>% distinct(Arb_PersonId) %>% pull(Arb_PersonId))) %>%
    filter(Intervention.factor == "Control",
           IndexVisit == 1)

  # Capture index visits for those in intervention phase in mod data
  wpv_int_ind <- visits_post_id %>%
    filter(Arb_PersonId %in% (data %>% filter(Intervention == "Intervention") %>% distinct(Arb_PersonId) %>% pull(Arb_PersonId))) %>%
    filter(Intervention.factor == "Intervention",
           IndexVisit == 1)
  
  ## Create wpv_data by stacking index visits in control and in intervention ----
  # wpv_data <- bind_rows(wpv_con_ind, wpv_int_ind)

  # Commented out because there is no need for pp_data to list analyzed and full
  ## Create data for sub table 3.2 ----
  # WPVs from all of those in mod_data, including the Index Visit
  # Capture index visits for those in control phase in mod data
  wpv_con_an_all <- visits_post_id %>%
    filter(Arb_PersonId %in% (data %>% filter(Intervention == "Control") %>% distinct(Arb_PersonId) %>% pull(Arb_PersonId))) %>%
    filter(Intervention.factor == "Control")

  # Capture index visits for those in intervention phase in mod data
  wpv_int_an_all <- visits_post_id %>%
    filter(Arb_PersonId %in% (data %>% filter(Intervention == "Intervention") %>% distinct(Arb_PersonId) %>% pull(Arb_PersonId))) %>%
    filter(Intervention.factor == "Intervention")

  ## Create a list consisting of the two separate data sets ----
  wpv_data <- list(bind_rows(wpv_con_ind, wpv_int_ind)
                   # bind_rows(wpv_con_an_all, wpv_int_an_all),
                   )

  # Clear out objects from the workspace
  rm(wpv_con_ind, wpv_int_ind, wpv_con_an_all, wpv_int_an_all)

  # Create output table
  tab2a <- wpv_data %>%
    purrr::map(
      ~ .x %>%
        mutate(#WPV_OBHPI = ifelse(WPV_OBHPI == 1 | WPV_WMQ == 1, 1, 0), # Combine OBHPI and WMQ
               WPV_vtype = ifelse(WPV_IP == 1 | WPV_TH == 1, 1, 0), # Combine WPV_IP and WPV_TH
               Intervention.factor = factor(Intervention.factor, levels = c("Control", "Intervention"))) %>%
        mutate(WPV_WMQ = ifelse(WPV_WMQ == 1 | WPV_PW_flow == 1, 1, 0)) %>%
        select(Intervention.factor,
               WPV_ICD,
               WPV_CC,
               WPV_OBHPI,
               WPV_WMQ,
               WPV_vtype,
               WPV_smart) %>%
        tbl_summary(by = Intervention.factor,
                    label = list(WPV_CC ~ "Chief Complaint",
                                 WPV_ICD ~ "ICD Codes",
                                 WPV_OBHPI ~ "OBHPI",
                                 WPV_WMQ ~ "Weight management questionnaire",
                                 WPV_vtype ~ "PW Visit Type",
                                 WPV_smart ~ "PATHWEIGH Smart Set"),
                    missing = "no",
                    digits = everything() ~ c(0,1))
      )
```


```{r}
tab2b <- 
  c("Control", "Intervention") %>%
    purrr::map_df(
      ~visits_post_id %>%
        filter(Arb_PersonId %in% (data %>% filter(Intervention == .x) %>% distinct(Arb_PersonId) %>% pull(Arb_PersonId))) %>%
        filter(IndexVisit == 1,
               Intervention.factor == .x) %>%
        select(
          Intervention.factor,
          Ref_BariatricSurgery:Ref_WellnessClinic,
          BariatricSurgery,
          N_Meds_AOM) %>%
        mutate(across(N_Meds_AOM, ~ifelse(. >= 1, 1, 0)),
               Intervention.factor = factor(Intervention.factor, levels= c("Control", "Intervention")))
    ) %>%
    tbl_summary(
      by = Intervention.factor,
      missing = "ifany",
      label = list(
        Ref_BariatricSurgery ~ "Referral to bariatric surgery",
        Ref_BehavioralHealth ~ "Referral to behavioral health",
        Ref_Dietician ~ "Referral to dietician",
        Ref_Endo ~ "Referral to endocrinology",
        Ref_WellnessClinic ~ "Referral to wellness clinic",
        BariatricSurgery ~ "Bariatric surgery",
        N_Meds_AOM ~ "Anti-obesity medications"),
      digits = list(all_categorical() ~ c(0,1),
                    all_continuous() ~ c(1,1)))
```

```{r}
tbls <- list(tab2a[[1]], tab2b) # because tab2a is a list, needs to be indexed
tbl_stack(tbls) %>% as_gt()
```


# Figure: Clinic Engagement
```{r}
clinic_engagement <- read_csv("D:/PATHWEIGH/working_files/clinic_engagement.csv", col_types = cols())
```

```{r}
# Drop any aberrant rows that may have been loaded, but not necessarily part
# of the data set of interest.
clinic_engagement %<>% 
  drop_na(DeptNameEpicId)

# Update the clinic visit counts in mod_data and merge with clinic_engagement
clinic_engagement %<>%
  select(DepartmentEpicId:Engagement)

# Get the Cohort values to join in to clinic engagement for grouping
cohort_vals <- visits_post_id %>%
  select(DepartmentEpicId, Cohort) %>%
  distinct() %>%
  filter(DepartmentEpicId %in% clinic_engagement$DepartmentEpicId)

# Join cohort values
clinic_engagement %<>%
  left_join(., cohort_vals, by = "DepartmentEpicId")
```


```{r}
# Number of clinics per cohort
cohort_n <- clinic_engagement %>%
  group_by(Cohort) %>%
  count() %>%
  mutate(Cohort_n = str_c(Cohort, ": n = ", n))
```


```{r}
# Histogram as percentages
hist <- clinic_engagement %>%
    left_join(., cohort_n, by = "Cohort") %>%
    select(Engagement, Cohort_n) %>%
    mutate(Engagement = factor(Engagement),
           Cohort = factor(Cohort_n))
```


```{r, warning=FALSE, message=FALSE, fig.dpi = 600, fig.width=6.5, fig1}
# Calculate percentage where the denominator is total in each respective cohort
hist %>%
  group_by(Cohort, Engagement) %>%
  summarise(n = n()) %>%
  mutate(freq = n / sum(n)) %>%
  ggplot(., aes(x = Engagement, y=freq, fill=Cohort)) + 
  geom_bar(stat="identity",position=position_dodge2(preserve = "single")) + 
  scale_y_continuous(labels = scales::label_percent()) +
  theme_minimal() +
  ylab("Percentage of clinics within cohort") +
  scale_fill_brewer(palette="Set2")

```
Caption: Engagement scores defined as the sum (0 -8) of a binary indicator of several measures of engagement. Measures of engagement include 1) Zoom intro meeting, 2) In-person clinic visit from a member of the PATHWEIGH team, 3) Requested support from PATHWEIGH clinical team, 4) Used PATHWEIGH e-Learning module, 5) WOF training, 6) use of PATHWEIGH Placard, 7) Attended learning community, 8) Chose practice champion.

# Model output
```{r}
# Redefine slope 1, slope 2, slope 3 in pp_mod_data since these variables came 
# from the loaded ee modeling dataset
pp_mod_data %<>%
  mutate(slope1 = ifelse(Intervention == "Control", 1, 0),
         slope2 = ifelse(pw == 1 & Intervention == "Intervention", 1, 0),
         slope3 = ifelse(pw == 0 & Intervention == "Intervention", 1, 0),
         )
```

```{r}
# Create binary variables
pp_mod_data %<>% 
  mutate(age_lt_45 = ifelse(Age_cat == "<=45", 1, 0),
         age_45_to_60 = ifelse(Age_cat == "45-60", 1, 0),
         age_gt_60 = ifelse(Age_cat == ">60", 1, 0),
         sex_m = ifelse(Sex == "Male", 1, 0),
         sex_f = ifelse(Sex == "Female", 1, 0),
         reth_nhw = ifelse(Race_Ethnicity == "Non-Hispanic White", 1, 0),
         reth_his = ifelse(Race_Ethnicity == "Hispanic or Latino", 1, 0),
         reth_blk = ifelse(Race_Ethnicity == "Black or African American", 1, 0),
         reth_asn = ifelse(Race_Ethnicity == "Asian", 1, 0),
         reth_oth = ifelse(Race_Ethnicity == "Other", 1, 0),
         reth_ukn = ifelse(Race_Ethnicity == "Unknown", 1, 0),
         year_at_ind0 = ifelse(Year_at_ind == "Year0", 1, 0),
         year_at_ind1 = ifelse(Year_at_ind == "Year1", 1, 0),
         year_at_ind2 = ifelse(Year_at_ind == "Year2", 1, 0),
         year_at_ind3 = ifelse(Year_at_ind == "Year3", 1, 0))
```

```{r}
# Linear mixed model with binary variables
lmer_mod_bin <- lmerTest::lmer(Weight_dv ~ 
                   
          # age
          age_45_to_60 + age_gt_60 + 
           
          # sex
          sex_m + 
          
          # race ethnicity
          reth_his + reth_blk + reth_asn + reth_oth + reth_ukn + 
           
          # year at index
          year_at_ind1 + year_at_ind2 + year_at_ind3 + 
           
          # Weight at baseline
          Weight_bl + slope1 +
             
          # Slope1 is the same as Phase/Intervention group
          slope1:N_days_post_id + slope1:N_days_post_180 + 
          
          # Slope2 is the opposi
          slope2:N_days_post_id + slope2:N_days_post_180 + 
          
          
          # Clustering, convergence issues with both dept and personid   
          # (1| DepartmentExternalName) + (1| Arb_PersonId),
          (1| Arb_PersonId),
                
          # Input data frame
          data=pp_mod_data
          )

# broom.mixed::tidy(lmer_mod_bin)
```

# Table: Model Output
```{r}
model_output <- broom.mixed::tidy(lmer_mod_bin)
```

```{r}
# Set a vector for term labels of the binary variables that were not included in 
# the model because its not necessary to include sex_f and sex_m in the formula.
# These terms are added for completeness when building the final output table
# and are used to create an ordered vector of terms for displaying the table.
term <- c("age_lt_45",
  "sex_f",
  "reth_nhw",
  "year_at_ind0")

model_terms <- model_output %>% pull(term)

# Set the order of the terms to organize them in a subsequent table
ordered_terms <- c(
  model_terms[1],
  term[1],
  model_terms[2:3],
  term[2],
  model_terms[4],
  term[3],
  model_terms[5:9],
  term[4],
  model_terms[10:20]
)

# Create the main table
# stack the vector terms with model_output
tab <- bind_rows(model_output, 
          (data.frame(term) %>% 
             mutate(effect = "fixed"))) %>% 
  
  # Arrange the terms in the previous step to the pre-specified orer
  arrange((factor(term, levels = ordered_terms))) %>% 
  
  # remove columns that are not needed for display
  select(-effect, -group, -statistic, -df) %>% 
  
  # remove rows that are not needed for display
  filter(!term %in% c("sd__(Intercept)", "sd__Observation")) %>%
  
  # convert the estimate for N_days_* to N_months_*
  mutate(estimate = ifelse(grepl("N_days_post", term), estimate * 30, estimate)) %>%
  mutate(std.error = ifelse(grepl("N_days_post", term), std.error * 30, std.error)) %>%
  
  # round values
  mutate(across(estimate:p.value, ~round(., 3))) %>%

  # convert term N_days_* to N_months_* and slope* to human readable
  mutate(term = str_replace(term, "N_days_post_id", "N_months_post_id"),
         term = str_replace(term, "N_days_post_180", "N_months_post_180"),
         term = str_replace(term, "slope1", "Control"),
         term = str_replace(term, "slope2", "Int_PW"),
         term = str_replace(term, "slope3", "Int_No_PW")) %>% 
  
  # relabel all of the values in the "term" column
  mutate(term = case_when(
    term == "age_lt_45" ~ "<45",
    term == "age_45_to_60" ~ "[45, 60)",
    term == "age_gt_60" ~ ">60",
    term == "sex_f" ~ "Female",
    term == "sex_m" ~ "Male",
    term == "reth_nhw" ~ "NonHispanicWhite",
    term == "reth_his" ~ "Hispanic",
    term == "reth_blk" ~ "Black",
    term == "reth_asn" ~ "Asian",
    term == "reth_oth" ~ "Other",
    term == "reth_ukn" ~ "Unknown",
    term == "year_at_ind0" ~ "0",
    term == "year_at_ind1" ~ "1",
    term == "year_at_ind2" ~ "2",
    term == "year_at_ind3" ~ "3",
    term == "Weight_bl" ~ "Weight_bl (kg)",
    term == "Intr" ~ "Intervention",
    .default = term))
```


```{r}
# Add grouping rows for the following terms
tab %>%
  mutate(across(estimate:std.error, ~ as.character(.))) %>%
  mutate(across(p.value, ~sprintf("%.3f", .))) %>% # Converting to character, but preserve the trailing zeros
  gt::gt(rowname_col = "term") %>%
  gt::rows_add(
    term = "Age",
    estimate = "",
    std.error = "",
    p.value = "    ",
    .after = "(Intercept)"
  ) %>%
  gt::rows_add(
    term = "Gender",
    estimate = "",
    std.error = "",
    p.value = "",
    .before = "Female") %>%
  gt::rows_add(
    term = "Race/Ethnicity",
    estimate = "",
    std.error = "",
    p.value = "",
    .after = "Male") %>%
  gt::rows_add(
    term = "Year at Index",
    estimate = "",
    std.error = "",
    p.value = "",
    .before = "0") %>%
  gt::tab_header(
    title = "ITT Model",
    # subtitle = "subtitle place holder"
  )
```

# Figure: Model figure

```{r}
# Plot with 3 panels. The first two panels are the control and intervention
# data from the pp_mod_data. The 3rd panel is the intervention data from the
# subset that received Pw.
# 
```


```{r}
# Create figure of observed vs predicted values
predicted <- predict(lmer_mod_bin, pp_mod_data, re.form=NA, type="response")

obs_pred <- bind_cols(pp_mod_data, data.frame(predicted)) %>%
  mutate(observed = Weight_dv)
```

```{r}
plot_data <- 
  obs_pred %>%
  select(Arb_PersonId, N_months_post_id, observed, predicted, Intervention) %>%
  group_by(Intervention, N_months_post_id) %>%
  summarise(across(observed:predicted, ~ mean(.x, rm.na = TRUE)), .groups = "drop") %>%
  pivot_longer(cols = observed:predicted, names_to = "Type", values_to = "Avg_Weight_kgs")
  # # filter(N_months_post_id < 5, Intervention == "Control") %>%
  # ggplot(., aes(x = N_months_post_id, y = Avg_Weight_kgs, color = Type, )) +
  # # geom_point() +
  # geom_line() +
  # facet_wrap(~Intervention) +
  # theme_minimal()
```

```{r, fig.width=6.5, fig.dpi = 600}
# Plot of Int_PW from the same model
bind_rows(
  plot_data,
  (obs_pred %>%
  filter(pw == 1) %>%
  select(Arb_PersonId, N_months_post_id, observed, predicted) %>%
  group_by(N_months_post_id) %>%
  summarise(across(observed:predicted, ~ mean(.x, rm.na = TRUE)), .groups = "drop") %>%
  pivot_longer(cols = observed:predicted, names_to = "Type", values_to = "Avg_Weight_kgs") %>%
  mutate(Intervention = "Int_PW"))) %>%
  mutate(Intervention = factor(Intervention, levels = c("Control", "Intervention", "Int_PW"))) %>%
  ggplot(., aes(x = N_months_post_id, y = Avg_Weight_kgs, color = Type, )) +
  geom_line() +
  facet_wrap(~Intervention) +
  theme_minimal()
```
```{r}
# Redefine slope 1, slope 2, slope 3 in pp_mod_data since thes variables came 
# from the loaded ee modeling dataset
pp_mod_data %<>%
  mutate(slope1 = ifelse(Intervention == "Control", 1, 0),
         slope2 = ifelse(pw == 1 & Intervention == "Intervention", 1, 0),
         slope3 = ifelse(pw == 0 & Intervention == "Intervention", 1, 0),
         )
```

```{r}
# PP model with patients that have both control and intervention visits
# Linear mixed model with binary variables
lmer_mod_bin <- lmerTest::lmer(Weight_dv ~ 
                   
          # age
          age_45_to_60 + age_gt_60 + 
           
          # sex
          sex_m + 
          
          # race ethnicity
          reth_his + reth_blk + reth_asn + reth_oth + reth_ukn + 
           
          # year at index
          year_at_ind1 + year_at_ind2 + year_at_ind3 + 
           
          # Weight at baseline
          Weight_bl + slope1 +
             
          # Slope1 is the same as Phase/Intervention group
          slope1:N_days_post_id + slope1:N_days_post_180 + 
          
          # Slope2 is the opposi
          slope2:N_days_post_id + slope2:N_days_post_180 + 
            
          # 3 - Intervention group no PW tools
          slope3:N_days_post_id + slope3:N_days_post_180 + 
          
          
          # Clustering, convergence issues with both dept and personid   
          # (1| DepartmentExternalName) + (1| Arb_PersonId),
          (1| Arb_PersonId),
                
          # Input data frame
          data=pp_mod_data
          )
```

```{r}
# Create figure of observed vs predicted values
predicted <- predict(lmer_mod_bin, pp_mod_data, re.form=NA, type="response")

obs_pred <- bind_cols(pp_mod_data, data.frame(predicted)) %>%
  mutate(observed = Weight_dv)

obs_pred <- obs_pred %>% filter(pw == 1)
```


```{r, fig.width=6.5, fig.dpi = 600}
# 3-line plot of the per-protocol model
bind_rows(plot_data,
(obs_pred %>%
  select(Arb_PersonId, N_months_post_id, observed, predicted) %>%
  group_by(N_months_post_id) %>%
  summarise(across(observed:predicted, ~ mean(.x, rm.na = TRUE)), .groups = "drop") %>%
  pivot_longer(cols = observed:predicted, names_to = "Type", values_to = "Avg_Weight_kgs") %>%
  mutate(Intervention = "Int_PW"))) %>%
  mutate(Intervention = factor(Intervention, levels = c("Control", "Intervention", "Int_PW"))) %>%
  ggplot(., aes(x = N_months_post_id, y = Avg_Weight_kgs, color = Type, )) +
  geom_line() +
  facet_wrap(~Intervention) +
  theme_minimal()
```

```{r, fig.width=6.5, eval=FALSE, echo = FALSE}
# # 4-line plot of PW and nPW in intervention and control groups
# pw_ids <- 
#   pp_data %>%
#   mutate(PW_Visit = if_else(WPV_WMQ == 1 | WPV_PW_flow ==1 | WPV_IP == 1 | WPV_TH == 1 | WPV_smart == 1, 1, 0)) %>%
#   filter(PW_Visit == 1) %>%
#   distinct(Arb_PersonId) %>%
#   pull(Arb_PersonId)
# 
# obs_pred %>%
#   mutate(pw = ifelse(Arb_PersonId %in% pw_ids, "PW", "nPW"))%>%
#   select(Arb_PersonId, N_months_post_id, observed, predicted, Intervention, pw) %>%
#   group_by(pw, Intervention, N_months_post_id) %>%
#   summarise(across(observed:predicted, ~ mean(.x, rm.na = TRUE)), .groups = "drop") %>%
#   pivot_longer(cols = observed:predicted, names_to = "Type", values_to = "Avg_Weight_kgs") %>%
#   # filter(N_months_post_id < 5, Intervention == "Control") %>%
#   ggplot(., aes(x = N_months_post_id, y = Avg_Weight_kgs, color = pw, )) +
#   # geom_point() +
#   geom_line(aes(linetype = Type)) +
#   facet_wrap(~Intervention) +
#   theme_minimal() +
#   theme(legend.position = "bottom") +
#   labs(color = "", linetype = "")
```


# Additional tables
## Supplement: Comorbidities
## Weight at the index