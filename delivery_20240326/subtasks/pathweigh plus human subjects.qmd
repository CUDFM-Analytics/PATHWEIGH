---
title: "PATHWEIGH Plus Human subjects"
format: 
  docx:
    reference-doc: "D:/PATHWEIGH/custom-reference-doc.docx"

execute: 
  echo: false
---


```{r}
#| echo: false
pacman::p_load(tidyverse,
               gtsummary,
               here,
               install = FALSE)

library(magrittr, include.only =  "%<>%")

# Load ee_ene
load(here("delivery_20240326/data/ee_ene_20240326.RData"))
```


```{r}
#| eval: false
# Buffer chunk
names(ee_ene)
table(ee_ene$Eligible)
table(ee_ene$Enrolled)
# Only need Race, Ethnicity, Sex, Arb_PersonId to capture one row per patient

# Then we have to define the variables.

ee_ene %>%
  filter(EncounterDate >= IndexDate) %>%
  nrow()
```

```{r}
data <- ee_ene
rm(ee_ene)
```

```{r}
# Set to capture the most recent visit
data %<>%
    filter(Censored == 0) %>%
    group_by(Arb_PersonId) %>%
    arrange(EncounterDate) %>%
    slice_tail(n = 1) %>%
    ungroup() %>%
    select(Arb_PersonId, Race, Ethnicity, Sex, Age) %>%
    rename(Gender = Sex)
```

```{r}
# Prepare the race column ----------------------------------------------------
  # Race values for NIH have to be one of the following (02/09/2023)
  race_vals_nih <- c("White",
                     "Black",
                     "Asian", 
                     "American Indian", 
                     "Hawaiian", 
                     "More than one race", 
                     "Unknown")
  
  # Capture the unique values in the Race column of the input data
  race_vals_data <- names(table(data$Race))
  
  # Test if the values in the data match those that are required by NIH?
  if(length(race_vals_data[(!race_vals_data %in% race_vals_nih)]) != 0){
    # message("The number of unique Race values in data do not match those required by NIH. Attempting to modify values.")
    
    # These vectors can be appended to incorporate additional values to properly 
    # categorize the EPIC data with the NIH values
    white <- c("White or Caucasian")
    
    black <- c("Black or African American")
    
    asian <- c("Asian") 
    
    american_indian <- c("American Indian or Alaska Native")
    
    hawaiian <- c("Native Hawaiian",
                  "Other Pacific Islander", 
                  "Native Hawaiian and Other Pacific Islander", 
                  "Samoan", 
                  "Guamanian or Chamorro")
    
    gt_1_race <-  c("Multiple Race")
    
    unknown_race <- c("", 
                  "Patient Refused",
                  "Patient Declined",
                  "Other")
    
    # Recode the values in the race column
    data %<>%
      mutate(
        Race = ifelse(Race %in% white, "White", Race),
        Race = ifelse(Race %in% black, "Black", Race),
        Race = ifelse(Race %in% american_indian, "American Indian", Race),
        Race = ifelse(Race %in% hawaiian, "Hawaiian", Race),
        Race = ifelse(Race %in% gt_1_race, "More than one race", Race),
        Race = ifelse(Race %in% unknown_race, "Unknown", Race)
      )
    
    # Check the number of values at this stage of the pipeline
    data %>%
      select(Race) %>%
      tbl_summary()

  
    # Check for any NAs
    if(sum(is.na(data$Race)) != 0){
      message("There are NAs in the Race variable.")
      }
    
    # Update the values of race data 
    race_vals_data <- names(table(data$Race))
    
    # Test if there are any values that have not been categorized
    if(length(race_vals_data[(!race_vals_data %in% race_vals_nih)]) !=0){
      print(race_vals_data[(!race_vals_data %in% race_vals_nih)])
      
      stop("The preceding values have not been correctly set.")
    } else {
      # message("Race values set!")
      }
  }
```

```{r}
# Prepare the ethnicity column -----------------------------------------------
  # Ethnicity values have to be one of the following:
  eth_vals_nih <-   c("Hispanic or Latino", 
                           "Not Hispanic or Latino",
                           "Unknown")
  
  eth_vals_data <- names(table(data$Ethnicity))
  
  # Test if the values in the data match those that are required by NIH?
  if(length(eth_vals_data[(!eth_vals_data %in% eth_vals_nih)]) != 0){
    
    # message("The number of unique Ethnicity values in data do not match those required by NIH. Attempting to modify values.")
    
    data %<>%
      mutate(
      Ethnicity = ifelse(Ethnicity %in% "Hispanic, Latino/a, or Spanish Origin", "Hispanic or Latino", Ethnicity),
      Ethnicity = ifelse(Ethnicity %in% "Non-Hispanic, Latino/a, or Spanish Origin", "Not Hispanic or Latino", Ethnicity),
      Ethnicity = ifelse(Ethnicity %in% c("*Unspecified", "Patient Unable to Answer"), "Unknown", Ethnicity),
      Ethnicity = ifelse(is.na(Ethnicity), "Unknown", Ethnicity)
    )
  
    # Check for any NAs
    if(sum(is.na(data$Ethnicity)) != 0){
      message("There are NAs in the Ethnicity variable.")
    }
    
    # Update the values of race data 
    eth_vals_data <- sort(names(table(data$Ethnicity)))
    
    
    # Test if there are any values that have not been categorized
    if(length(eth_vals_data[(!eth_vals_data %in% eth_vals_nih)]) !=0){
      print(eth_vals_data[(!eth_vals_data %in% eth_vals_nih)])
      stop("The preceding values have not been correctly set.")
    } else {
      # message("Ethnicity values set!")
      }
  }
```


```{r}
# Prepare the gender column --------------------------------------------------
  # NIH values have to be one of the following:
  gender_vals_nih <- c("Male", "Female", "Unknown")
  
  gender_vals_data <- names(table(data$Gender))
  
  # Test if the values in the data match those that are required by NIH?
  if(length(gender_vals_data[(!gender_vals_data %in% gender_vals_nih)]) != 0){
    
    message("The number of unique Gender values in data do not match those required by NIH. Attempting to modify values.")
    
    # This is left as a scaffold in case any values do not match in future data 
    # deliveries
    # male <- c({values that correspond to male})
    # female <- c({values that correspond to female}
    # unknown_gend <- c({values that correspond to unkown}))
    # data %<>%
    #   mutate(
    #     Gender = ifelse(Gender %in% male, "Male", Gender),
    #     Gender = ifelse(Gender %in% female, "Female", Gender),
    #     Gender = ifelse(Gender %in% unknown_gend, "Unknown", Gender)
    #   )
    
    # Check for any NAs
    if(sum(is.na(data$Gender)) != 0){
      message("There are NAs in the Gender variable.")
    }
    
    # Update the values of race data 
    gender_vals_data <- sort(names(table(data$Gender)))
    
    # Test if there are any values that have not been categorized
    if(length(gender_vals_data[(!gender_vals_data %in% gender_vals_nih)]) !=0){
      print(gender_vals_data[(!gender_vals_data %in% gender_vals_nih)])
      stop("The preceding values have not been correctly set.")
    } else {
      # Return the gender values back to the environment for 
      message("Gender values set!")
    }
  }
```

```{r}
#| eval: true

data %>%
    filter(Gender != "Unknown",
         Race != "Unknown",
         Ethnicity != "Unknown") %>%
    select(-Arb_PersonId, -Age) %>%
    # mutate(Ethnicity = factor(Ethnicity, levels = c('Not Hispanic or Latino', 'Hispanic or Latino', 'Unknown'))) %>%
    # could add the ordering for the enrollment table here
    #select(White, Black, `American Indian`, Hawaiian, `More than one race`, Unknown) %>%
    gtsummary::tbl_summary(by = Ethnicity) %>%
    gtsummary::add_overall()
```


```{r}
data %>%
  filter(Gender != "Unknown",
         Race != "Unknown",
         Ethnicity != "Unknown") %>%
  mutate(Ethnicity = factor(Ethnicity, levels = c('Not Hispanic or Latino', 'Hispanic or Latino'))) %>%
  mutate(Race = factor(Race, levels = c('American Indian', 'Asian', 'Hawaiian', 'Black', 'White', 'More than one race' ))) %>%
  select(-Arb_PersonId, -Age) %>%
  tbl_strata(
    strata = Ethnicity,
    .tbl_fun = 
      ~ .x %>%
        tbl_summary(by = Gender
          # stat = all_categorical() ~ "{n}"
          )
  )
```

```{r}
#| eval: false
tab1 <-
data %>%
  filter(Gender != "Unknown",
         Race != "Unknown",
         Ethnicity != "Unknown") %>%
  # mutate(Ethnicity = factor(Ethnicity, levels = c('Not Hispanic or Latino', 'Hispanic or Latino'))) %>%
  mutate(Race = factor(Race, levels = c('American Indian', 'Asian', 'Hawaiian', 'Black', 'White', 'More than one race' ))) %>%
  select(-Arb_PersonId, -Age) %>%
  tbl_strata(
    strata = Ethnicity,
    .tbl_fun = 
      ~ .x %>%
        tbl_summary(by = Gender
          # stat = all_categorical() ~ "{n}"
          )
  )


tab2 <-
data %>%
  select(-Arb_PersonId, -Age) %>%
  filter(Gender != "Unknown",
         Race != "Unknown",
         Ethnicity != "Unknown") %>%
  mutate(Race = factor(Race, levels = c('American Indian', 'Asian', 'Hawaiian', 'Black', 'White', 'More than one race' ))) %>%
  group_by(Race) %>%
  count() %>%
  rename(Total = n) %>%
  as_tibble()

tab2 <-
data %>%
  filter(Gender != "Unknown",
        Race != "Unknown",
        Ethnicity != "Unknown") %>%
  select(Race) %>%
  mutate(Race = factor(Race, levels = c('American Indian', 'Asian', 'Hawaiian', 'Black', 'White', 'More than one race' ))) %>%
  tbl_summary()
```

```{r}
#| eval: false
# Experimental
tbl_merge(
  tbls = list(tab1, tab2),
  tab_spanner = c("", '')
) %>%
as_gt()
```

```{r}
data %>%
  select(Ethnicity) %>%
  filter(Ethnicity != 'Unknown') %>%
  tbl_summary()
```

```{r}
data %>%
  filter(Ethnicity == 'Not Hispanic or Latino') %>%
  select(Gender) %>%
  tbl_summary()
```

```{r}
data %>%
  filter(Ethnicity == 'Hispanic or Latino') %>%
  select(Gender) %>%
  tbl_summary()
```

```{r}
data %>%
  filter(Ethnicity == 'Not Hispanic or Latino',
         Gender == 'Female',
         Race != 'Unknown') %>%
  select(Race) %>%
  tbl_summary()
```
```{r}
data %>%
  filter(Ethnicity == 'Not Hispanic or Latino',
         Gender == 'Male',
         Race != 'Unknown') %>%
  select(Race) %>%
  tbl_summary()
```

```{r}
data %>%
  filter(Ethnicity == 'Hispanic or Latino',
         Gender == 'Female',
         Race != 'Unknown') %>%
  select(Race) %>%
  tbl_summary()
```

```{r}
data %>%
  filter(Ethnicity == 'Hispanic or Latino',
         Gender == 'Male',
         Race != 'Unknown') %>%
  select(Race) %>%
  tbl_summary()
```

